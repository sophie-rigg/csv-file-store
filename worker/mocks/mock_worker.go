// Code generated by MockGen. DO NOT EDIT.
// Source: worker.go

// Package mocks is a generated GoMock package.
package mocks

import (
	cache "github.com/sophie-rigg/csv-file-store/cache"
	worker "github.com/sophie-rigg/csv-file-store/worker"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddJob mocks base method.
func (m *MockClient) AddJob(job *worker.Job) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddJob", job)
}

// AddJob indicates an expected call of AddJob.
func (mr *MockClientMockRecorder) AddJob(job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJob", reflect.TypeOf((*MockClient)(nil).AddJob), job)
}

// GetCache mocks base method.
func (m *MockClient) GetCache() *cache.Cache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache")
	ret0, _ := ret[0].(*cache.Cache)
	return ret0
}

// GetCache indicates an expected call of GetCache.
func (mr *MockClientMockRecorder) GetCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockClient)(nil).GetCache))
}
